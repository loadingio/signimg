require! <[fs express body-parser path colors template ../dist/sign]>

pvk = fs.read-file-sync '../key/pvk.pem'
pbk = fs.read-file-sync '../key/pbk.pem'
backend = do
  init: (opt) ->
    @app = app = express!

    app.set 'view engine', \pug
    app.use \/, express.static \static
    if opt.api => opt.api @
    console.log "[Server] Express Initialized in #{app.get \env} Mode".green

    app.use body-parser.json({limit: '5mb'})
    app.use body-parser.urlencoded(extended: true, limit: '5mb')

    app.post \/d/sign, (req, res) ->
      msg = (req.body or {}) <<< {vendor: "generated by loading.io"}
      sign.sign-info(msg, pvk)
        .then (payload) -> res.send payload
        .catch -> res.send!
    app.post \/d/verify, (req, res) ->
      sign.verify-info req.body.msg, req.body.sig, pbk
        .then -> res.send it 
        .catch ->
          console.log it
          res.send!



    # server from sharedb http server or express
    server = app.listen opt.port, ->
      delta = if opt.start-time => "( takes #{Date.now! - opt.start-time}ms )" else ''
      console.log "[SERVER] listening on port #{server.address!port} #delta".cyan

config = JSON.parse(fs.read-file-sync 'config.json' .toString!)

backend.init config
template.watch.init config

