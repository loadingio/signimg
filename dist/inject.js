// Generated by LiveScript 1.3.1
var crc32, inject, makePngBlock, makeGifBlock, injectGifBlock, injectPngBlock;
if (typeof module != 'undefined' && module !== null) {
  crc32 = require("crc-32");
}
inject = function(img, msg, sig){
  return new Promise(function(res, rej){
    var type, buf;
    if (typeof msg !== 'string') {
      msg = JSON.stringify(msg);
    }
    if (typeof sig !== 'string') {
      sig = JSON.stringify(sig);
    }
    type = [0x47, 0x49, 0x46, 0x38].map(function(d, i){
      return img[i] === d;
    }).reduce(function(a, b){
      return a && b;
    }, true)
      ? 'gif'
      : [0x89, 0x50, 0x4e, 0x47].map(function(d, i){
        return img[i] === d;
      }).reduce(function(a, b){
        return a && b;
      }, true) ? 'png' : 'unknown';
    if (type === 'gif') {
      buf = Buffer.concat([makeGifBlock(msg, false), makeGifBlock(sig, true)]);
      return res(injectGifBlock(img, buf));
    } else if (type === 'png') {
      buf = Buffer.concat([makePngBlock(msg, false), makePngBlock(sig, true)]);
      return res(injectPngBlock(img, buf));
    } else {
      return Promise.reject(new Error("unsupported file format"));
    }
  });
};
makePngBlock = function(input, isSig){
  var src, crc, i$, i;
  isSig == null && (isSig = false);
  if (typeof input === 'string') {
    input = Buffer.from(input);
  }
  src = Buffer.alloc(input.length + 12);
  input.copy(src, 8);
  crc = crc32.buf(input);
  src.writeUInt32BE(input.length, 0);
  src.writeInt32BE(crc, input.length + 8);
  for (i$ = 0; i$ < 4; ++i$) {
    i = i$;
    src[i + 4] = "iTXt".charCodeAt(i);
  }
  return src;
};
makeGifBlock = function(input, isSig){
  var src, des, srcp, desp, srclen, offset;
  isSig == null && (isSig = false);
  if (typeof input === 'string') {
    input = Buffer.from(input);
  }
  src = input;
  des = Buffer.alloc(2 + src.length + Math.ceil(src.length / 255) + (src.length === 0 ? 0 : 1));
  des[0] = 0x21;
  des[1] = 0xfe;
  srcp = 0;
  desp = 2;
  srclen = src.length;
  for (;;) {
    offset = srclen <= 255 ? srclen : 255;
    des[desp] = offset;
    if (offset > 0) {
      src.copy(des, desp + 1, srcp, srcp + offset);
      srcp += offset;
      desp += offset + 1;
      srclen -= offset;
    } else {
      break;
    }
  }
  return des;
};
injectGifBlock = function(gif, buf){
  var global, gcts, out;
  global = gif[10] & 0x80;
  gcts = global ? Math.pow(2, (gif[10] & 0x07) + 1) : 0;
  out = Buffer.alloc(gif.length + buf.length);
  gif.copy(out, 0, 0, 13 + gcts * 3 - 1);
  buf.copy(out, 13 + gcts * 3, 0, buf.length - 1);
  gif.copy(out, (13 + gcts * 3) + buf.length, 13 + gcts * 3, gif.length - 1);
  return out;
};
injectPngBlock = function(png, buf){
  var out, offset;
  out = Buffer.alloc(png.length + buf.length);
  offset = png.readUInt32BE(8) + 8 + 12;
  png.copy(out, 0, 0, offset);
  buf.copy(out, offset);
  png.copy(out, offset + buf.length, offset);
  return out;
};
if (typeof module != 'undefined' && module !== null) {
  module.exports = inject;
}
if (typeof window != 'undefined' && window !== null) {
  window.signimg = {
    inject: inject
  };
}
